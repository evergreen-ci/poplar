syntax = "proto3";

package poplar;
option go_package = "internal";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message RecorderID {
  string name = 1;
}

message EventSendTime {
  string name = 1;
  google.protobuf.Timestamp time = 2;
}

message EventSendInt {
  string name = 1;
  int64 value = 2;
}

message EventSendBool {
  string name = 1;
  bool value = 2;
}

message EventSendDuration {
  string name = 1;
  google.protobuf.Duration duration = 2;
}

message EventResponse {
  string name = 1;
  bool status = 2;
}

message CreateOptions {
  string name = 1;
  string path = 2;
  int32 chunkSize = 3;
  bool streaming = 4;
  bool dynamic = 5;
  enum RecorderType {
    UNKNOWN = 0;
    PERF = 1;
    PERF_SINGLE = 2;
    PERF_100MS = 3;
    PERF_1S = 4;
    HISTOGRAM_SINGLE = 6;
    HISTOGRAM_100MS = 7;
    HISTOGRAM_1S = 8;
  };
  RecorderType recorder = 6;
}

service PoplarMetricsRecorder {
  // Create builds a new recorder instance which creates a local file,
  // while the close recorder method flushes the contents of that
  // recorder and closes the file.
  rpc CreateRecorder(CreateOptions) returns (EventResponse);
  rpc CloseRecorder(RecorderID) returns (EventResponse);

  // Event Lifecycle methods
  rpc BeginEvent(RecorderID) returns (EventResponse);
  rpc ResetEvent(RecorderID) returns (EventResponse);
  rpc EndEvent(EventSendDuration) returns (EventResponse);

  // Timers
  rpc SetTime(EventSendTime) returns (EventResponse);
  rpc SetDuration(EventSendDuration) returns (EventResponse);
  rpc SetTotalDuration(EventSendDuration) returns (EventResponse);

  // Guages
  rpc SetState(EventSendInt) returns (EventResponse);
  rpc SetWorkers(EventSendInt) returns (EventResponse);
  rpc SetFailed(EventSendBool) returns (EventResponse);

  // Counters
  rpc IncOps(EventSendInt) returns (EventResponse);
  rpc IncSize(EventSendInt) returns (EventResponse);
  rpc IncError(EventSendInt) returns (EventResponse);
  rpc IncIterations(EventSendInt) returns (EventResponse);
}
