// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: metrics.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoplarMetricsCollectorClient is the client API for PoplarMetricsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoplarMetricsCollectorClient interface {
	CreateCollector(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error)
	CloseCollector(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	ResetSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	FlushSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	Add(ctx context.Context, in *IntervalSummary, opts ...grpc.CallOption) (*PoplarResponse, error)
}

type poplarMetricsCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewPoplarMetricsCollectorClient(cc grpc.ClientConnInterface) PoplarMetricsCollectorClient {
	return &poplarMetricsCollectorClient{cc}
}

func (c *poplarMetricsCollectorClient) CreateCollector(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/CreateCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) CloseCollector(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/CloseCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) ResetSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/ResetSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) FlushSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/FlushSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) Add(ctx context.Context, in *IntervalSummary, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoplarMetricsCollectorServer is the server API for PoplarMetricsCollector service.
// All implementations must embed UnimplementedPoplarMetricsCollectorServer
// for forward compatibility
type PoplarMetricsCollectorServer interface {
	CreateCollector(context.Context, *CreateOptions) (*PoplarResponse, error)
	CloseCollector(context.Context, *PoplarID) (*PoplarResponse, error)
	ResetSample(context.Context, *PoplarID) (*PoplarResponse, error)
	FlushSample(context.Context, *PoplarID) (*PoplarResponse, error)
	Add(context.Context, *IntervalSummary) (*PoplarResponse, error)
	mustEmbedUnimplementedPoplarMetricsCollectorServer()
}

// UnimplementedPoplarMetricsCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedPoplarMetricsCollectorServer struct {
}

func (UnimplementedPoplarMetricsCollectorServer) CreateCollector(context.Context, *CreateOptions) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollector not implemented")
}
func (UnimplementedPoplarMetricsCollectorServer) CloseCollector(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCollector not implemented")
}
func (UnimplementedPoplarMetricsCollectorServer) ResetSample(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSample not implemented")
}
func (UnimplementedPoplarMetricsCollectorServer) FlushSample(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushSample not implemented")
}
func (UnimplementedPoplarMetricsCollectorServer) Add(context.Context, *IntervalSummary) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPoplarMetricsCollectorServer) mustEmbedUnimplementedPoplarMetricsCollectorServer() {
}

// UnsafePoplarMetricsCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoplarMetricsCollectorServer will
// result in compilation errors.
type UnsafePoplarMetricsCollectorServer interface {
	mustEmbedUnimplementedPoplarMetricsCollectorServer()
}

func RegisterPoplarMetricsCollectorServer(s grpc.ServiceRegistrar, srv PoplarMetricsCollectorServer) {
	s.RegisterService(&PoplarMetricsCollector_ServiceDesc, srv)
}

func _PoplarMetricsCollector_CreateCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).CreateCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/CreateCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).CreateCollector(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_CloseCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).CloseCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/CloseCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).CloseCollector(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_ResetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).ResetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/ResetSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).ResetSample(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_FlushSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).FlushSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/FlushSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).FlushSample(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).Add(ctx, req.(*IntervalSummary))
	}
	return interceptor(ctx, in, info, handler)
}

// PoplarMetricsCollector_ServiceDesc is the grpc.ServiceDesc for PoplarMetricsCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoplarMetricsCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poplar.PoplarMetricsCollector",
	HandlerType: (*PoplarMetricsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollector",
			Handler:    _PoplarMetricsCollector_CreateCollector_Handler,
		},
		{
			MethodName: "CloseCollector",
			Handler:    _PoplarMetricsCollector_CloseCollector_Handler,
		},
		{
			MethodName: "ResetSample",
			Handler:    _PoplarMetricsCollector_ResetSample_Handler,
		},
		{
			MethodName: "FlushSample",
			Handler:    _PoplarMetricsCollector_FlushSample_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PoplarMetricsCollector_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
