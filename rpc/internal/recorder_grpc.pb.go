// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: recorder.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoplarMetricsRecorderClient is the client API for PoplarMetricsRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoplarMetricsRecorderClient interface {
	// Create builds a new recorder instance which creates a local file,
	// while the close recorder method flushes the contents of that
	// recorder and closes the file.
	CreateRecorder(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error)
	CloseRecorder(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Event Lifecycle methods
	BeginEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	ResetEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	EndEvent(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetID(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Timers
	SetTime(ctx context.Context, in *EventSendTime, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetTotalDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Guages
	SetState(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetWorkers(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetFailed(ctx context.Context, in *EventSendBool, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Counters
	IncOps(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncSize(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncError(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncIterations(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
}

type poplarMetricsRecorderClient struct {
	cc grpc.ClientConnInterface
}

func NewPoplarMetricsRecorderClient(cc grpc.ClientConnInterface) PoplarMetricsRecorderClient {
	return &poplarMetricsRecorderClient{cc}
}

func (c *poplarMetricsRecorderClient) CreateRecorder(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/CreateRecorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) CloseRecorder(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/CloseRecorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) BeginEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/BeginEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) ResetEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/ResetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) EndEvent(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/EndEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetID(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetTime(ctx context.Context, in *EventSendTime, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetTotalDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetTotalDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetState(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetWorkers(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetFailed(ctx context.Context, in *EventSendBool, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncOps(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncOps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncSize(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncError(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncIterations(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncIterations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoplarMetricsRecorderServer is the server API for PoplarMetricsRecorder service.
// All implementations must embed UnimplementedPoplarMetricsRecorderServer
// for forward compatibility
type PoplarMetricsRecorderServer interface {
	// Create builds a new recorder instance which creates a local file,
	// while the close recorder method flushes the contents of that
	// recorder and closes the file.
	CreateRecorder(context.Context, *CreateOptions) (*PoplarResponse, error)
	CloseRecorder(context.Context, *PoplarID) (*PoplarResponse, error)
	// Event Lifecycle methods
	BeginEvent(context.Context, *PoplarID) (*PoplarResponse, error)
	ResetEvent(context.Context, *PoplarID) (*PoplarResponse, error)
	EndEvent(context.Context, *EventSendDuration) (*PoplarResponse, error)
	SetID(context.Context, *EventSendInt) (*PoplarResponse, error)
	// Timers
	SetTime(context.Context, *EventSendTime) (*PoplarResponse, error)
	SetDuration(context.Context, *EventSendDuration) (*PoplarResponse, error)
	SetTotalDuration(context.Context, *EventSendDuration) (*PoplarResponse, error)
	// Guages
	SetState(context.Context, *EventSendInt) (*PoplarResponse, error)
	SetWorkers(context.Context, *EventSendInt) (*PoplarResponse, error)
	SetFailed(context.Context, *EventSendBool) (*PoplarResponse, error)
	// Counters
	IncOps(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncSize(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncError(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncIterations(context.Context, *EventSendInt) (*PoplarResponse, error)
	mustEmbedUnimplementedPoplarMetricsRecorderServer()
}

// UnimplementedPoplarMetricsRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedPoplarMetricsRecorderServer struct {
}

func (UnimplementedPoplarMetricsRecorderServer) CreateRecorder(context.Context, *CreateOptions) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecorder not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) CloseRecorder(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRecorder not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) BeginEvent(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginEvent not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) ResetEvent(context.Context, *PoplarID) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEvent not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) EndEvent(context.Context, *EventSendDuration) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndEvent not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetID(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetID not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetTime(context.Context, *EventSendTime) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTime not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetDuration(context.Context, *EventSendDuration) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDuration not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetTotalDuration(context.Context, *EventSendDuration) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTotalDuration not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetState(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetWorkers(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkers not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) SetFailed(context.Context, *EventSendBool) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFailed not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) IncOps(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncOps not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) IncSize(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncSize not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) IncError(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncError not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) IncIterations(context.Context, *EventSendInt) (*PoplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncIterations not implemented")
}
func (UnimplementedPoplarMetricsRecorderServer) mustEmbedUnimplementedPoplarMetricsRecorderServer() {}

// UnsafePoplarMetricsRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoplarMetricsRecorderServer will
// result in compilation errors.
type UnsafePoplarMetricsRecorderServer interface {
	mustEmbedUnimplementedPoplarMetricsRecorderServer()
}

func RegisterPoplarMetricsRecorderServer(s grpc.ServiceRegistrar, srv PoplarMetricsRecorderServer) {
	s.RegisterService(&PoplarMetricsRecorder_ServiceDesc, srv)
}

func _PoplarMetricsRecorder_CreateRecorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).CreateRecorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/CreateRecorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).CreateRecorder(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_CloseRecorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).CloseRecorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/CloseRecorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).CloseRecorder(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_BeginEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).BeginEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/BeginEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).BeginEvent(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_ResetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).ResetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/ResetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).ResetEvent(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_EndEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).EndEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/EndEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).EndEvent(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetID(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetTime(ctx, req.(*EventSendTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetDuration(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetTotalDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetTotalDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetTotalDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetTotalDuration(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetState(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetWorkers(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetFailed(ctx, req.(*EventSendBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncOps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncOps(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncSize(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncError(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncIterations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncIterations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncIterations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncIterations(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

// PoplarMetricsRecorder_ServiceDesc is the grpc.ServiceDesc for PoplarMetricsRecorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoplarMetricsRecorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poplar.PoplarMetricsRecorder",
	HandlerType: (*PoplarMetricsRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecorder",
			Handler:    _PoplarMetricsRecorder_CreateRecorder_Handler,
		},
		{
			MethodName: "CloseRecorder",
			Handler:    _PoplarMetricsRecorder_CloseRecorder_Handler,
		},
		{
			MethodName: "BeginEvent",
			Handler:    _PoplarMetricsRecorder_BeginEvent_Handler,
		},
		{
			MethodName: "ResetEvent",
			Handler:    _PoplarMetricsRecorder_ResetEvent_Handler,
		},
		{
			MethodName: "EndEvent",
			Handler:    _PoplarMetricsRecorder_EndEvent_Handler,
		},
		{
			MethodName: "SetID",
			Handler:    _PoplarMetricsRecorder_SetID_Handler,
		},
		{
			MethodName: "SetTime",
			Handler:    _PoplarMetricsRecorder_SetTime_Handler,
		},
		{
			MethodName: "SetDuration",
			Handler:    _PoplarMetricsRecorder_SetDuration_Handler,
		},
		{
			MethodName: "SetTotalDuration",
			Handler:    _PoplarMetricsRecorder_SetTotalDuration_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _PoplarMetricsRecorder_SetState_Handler,
		},
		{
			MethodName: "SetWorkers",
			Handler:    _PoplarMetricsRecorder_SetWorkers_Handler,
		},
		{
			MethodName: "SetFailed",
			Handler:    _PoplarMetricsRecorder_SetFailed_Handler,
		},
		{
			MethodName: "IncOps",
			Handler:    _PoplarMetricsRecorder_IncOps_Handler,
		},
		{
			MethodName: "IncSize",
			Handler:    _PoplarMetricsRecorder_IncSize_Handler,
		},
		{
			MethodName: "IncError",
			Handler:    _PoplarMetricsRecorder_IncError_Handler,
		},
		{
			MethodName: "IncIterations",
			Handler:    _PoplarMetricsRecorder_IncIterations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder.proto",
}
